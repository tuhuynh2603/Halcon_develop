<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="13.0.2.2">
<procedure name="main">
<interface/>
<body>
<c></c>
<c>* Find all files in the HDevelop example directory.</c>
<c></c>
<c></c>
<l>dev_open_file_dialog ('', 'dir', 'default', Selection)</l>
<l>list_files (Selection,  'directories', DirecrFiles)</l>
<l>gen_rectangle1 (TMP_Region0, 1240.1, 1764.82, 1288.74, 1831.38)</l>
<l>gen_rectangle1 (TMP_Region1, 1240.1, 1065.94, 1283.62, 1122.26)</l>
<l>gen_rectangle1 (TMP_Region2, 1255.46, 1424.34, 1293.86, 1470.42)</l>
<l>gen_rectangle1 (TMP_Region3, 1252.9, 254.42, 1288.74, 326.1)</l>
<l>gen_rectangle1 (TMP_Region4, 1160.74, 689.62, 1211.94, 738.26)</l>
<l>gen_rectangle1 (TMP_Region5, 1196.58, 953.3, 1232.42, 996.82)</l>
<l>gen_rectangle1 (TMP_Region6, 1240.1, 1764.82, 1388.74, 1831.38)</l>
<l>gen_rectangle1 (TMP_Region7, 1240.1, 1065.94, 1383.62, 1122.26)</l>
<l>gen_rectangle1 (TMP_Region8, 1255.46, 1324.34, 1293.86, 1370.42)</l>
<l>gen_rectangle1 (TMP_Region9, 1252.9, 254.42, 1288.74, 326.1)</l>
<l>gen_rectangle1 (TMP_Region10, 1110.74, 689.62, 1161.94, 738.26)</l>
<l>gen_rectangle1 (TMP_Region11, 1240.1, 1764.82, 1288.74, 1831.38)</l>
<l>gen_rectangle1 (TMP_Region12, 1255.46, 1424.34, 1293.86, 1470.42)</l>
<l>gen_rectangle1 (TMP_Region13, 1352.9, 254.42, 1388.74, 326.1)</l>
<l>gen_rectangle1 (TMP_Region14, 1240.1, 1664.82, 1288.74, 1731.38)</l>
<l>gen_rectangle1 (TMP_Region15, 1240.1, 1065.94, 1273.62, 1122.26)</l>
<l>gen_rectangle1 (TMP_Region16, 1255.46, 1424.34, 1293.86, 1470.42)</l>
<l>gen_rectangle1 (TMP_Region17, 1240.1, 1464.82, 1288.74, 1531.38)</l>
<l>gen_rectangle1 (TMP_Region18, 1200.1, 1065.94, 1253.62, 1122.26)</l>
<l>gen_rectangle1 (TMP_Region19, 1140.1, 1764.82, 1238.74, 1831.38)</l>
<c></c>
<l>gen_empty_obj (DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region0, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region1, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region2, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region3, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region4, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region5, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region6, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region7, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region8, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region9, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region10, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region11, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region12, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region13, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region14, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region15, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region16, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region17, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region18, DeepLearningDefectROI)</l>
<l>concat_obj (DeepLearningDefectROI, TMP_Region19, DeepLearningDefectROI)</l>
<c></c>
<c></c>
<l>tuple_length (DirecrFiles, Length_dir)</l>
<l>list_files (Selection,['files','recursive'], Image_files)</l>
<l>tuple_length (Image_files, Length_image)</l>
<c></c>
<l>multi := Length_image / Length_dir</l>
<l>index := 1 </l>
<l>index2 := 15</l>
<l>* read_image (Image1, Image_files[index])</l>
<l>* read_image (Image4, Image_files[index2])</l>
<c></c>
<c>*Param</c>
<l>Top_param_encap (Width_Select_min, Width_Select_max, Height_Select_min, Height_Select_max, Thresh_Min, Thresh_Max, Thresh_Black, Thresh_White, Dilate_Width, Dilate_Height, Opening_Rect_Width, Opening_Rect_Height, Smooth_Value_Crop, Shape_Width, Opening_Circle, Opening_Circle_Crop, Crop_Smooth_Height, Left_Crop_Expand, Right_Crop_Expand, Height_Crop_Expand, Left_SmoothBLCrop_Expand, Right_SmoothBLCrop_Expand, Height_SmoothCrop_Expand_bot)</l>
<l>Bottom_param_encap (Thresh_Min_bot, Thresh_Max_bot, Thresh_Black_bot, Thresh_White_bot, Width_Select_min_bot, Width_Select_max_bot, Height_Select_min_bot, Height_Select_max_bot, Dilate_Width_bot, Dilate_Height_bot, Opening_Rect_Width_bot, Opening_Rect_Height_bot, Smooth_Value_Crop_bot, Shape_Width_bot, Opening_Circle_bot, Opening_Circle_Crop_bot, Crop_Smooth_Height_bot, Left_Crop_Expand_bot, Right_Crop_Expand_bot, Height_Crop_Expand_bot, Left_SmoothBLCrop_Expand_bot, Right_SmoothBLCrop_Expand_bot, Height_SmoothBLCrop_Expand_bot)</l>
<c>* end param</c>
<c></c>
<l>for i:= 1 to Length_dir-1 by 1</l>
<l>    index_read := i*multi + index</l>
<l>    index_read2 := i*multi + index2</l>
<l>    read_image (hImage, Image_files[index_read])</l>
<l>    gen_rectangle1 (EncapTracingROI, 224.618, 190.707, 522.013, 1917.92)  </l>
<l>    gen_region_runs (hRegionLinesDarkMask, [192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,272,273,273,273,274,274,274,275,275,275,276,276,276,277,277,277,278,278,279,279], [1398,1169,939,710,595,596,597,597,598,599,600,601,601,602,603,604,604,605,606,607,608,608,609,610,611,612,612,613,614,615,615,616,617,618,619,619,620,621,622,623,623,624,625,626,627,627,628,629,630,630,631,632,633,634,634,635,636,637,638,638,639,640,641,641,642,643,644,645,645,646,647,648,649,649,650,651,652,652,653,654,655,1008,656,1031,1467,656,1054,1473,657,1078,1479,645,1101,1485,657,1124,1491,681,1497,705,1503], [1512,1512,1512,1512,1512,1512,1512,1511,1511,1511,1511,1511,1511,1511,1511,1511,1511,1511,1511,1510,1510,1510,1510,1510,1510,1510,1510,1510,1510,1510,1510,1510,1509,1509,1509,1509,1509,1509,1509,1509,1509,1509,1509,1509,1508,1508,1508,1508,1508,1508,1508,1508,1508,1508,1508,1508,1507,1507,1507,1507,1507,1507,1507,1507,1507,1507,1507,1507,1507,1506,1506,1506,1506,1506,1506,1506,1506,1506,1506,1506,974,1506,932,1451,1505,890,1427,1505,847,1329,1505,805,1292,1505,772,1254,1505,750,1505,727,1505])</l>
<l>*     difference (EncapTracingROI, hRegionMaskLinesDark, RegionDifference3)</l>
<l>    read_image (hImage, Image_files[index_read2])</l>
<l>    gen_rectangle1 (EncapTracingROI, 1029.82, 128.772, 1449.67, 1947.59)</l>
<l>    gen_region_runs (hRegionLinesDarkMask, [1283,1284,1285,1286,1286,1286,1287,1287,1287,1288,1288,1288,1289,1289,1290,1290,1291,1291,1292,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449], [836,819,801,534,568,778,534,563,748,534,559,718,534,554,533,549,533,545,533,540,533,533,533,533,532,532,532,532,532,532,531,531,531,531,531,531,531,530,530,530,530,530,530,530,529,529,529,529,529,529,528,528,528,528,528,528,528,527,527,527,527,527,527,527,526,526,526,526,526,526,525,525,525,525,525,525,525,524,524,524,524,524,524,524,523,523,523,523,523,523,523,522,522,522,522,522,522,521,521,521,521,521,521,521,520,520,520,520,520,520,520,519,519,519,519,519,519,518,518,518,518,518,518,518,517,517,517,517,517,517,517,516,516,516,516,516,516,515,515,515,515,515,515,515,514,514,514,514,514,514,514,513,513,513,513,513,513,512,512,512,512,512,512,512,511,511,511,511,525,552,580,607,634,661,688,716,743], [1290,1392,1494,534,592,1546,534,636,1547,535,680,1548,535,1549,536,1550,536,1551,537,1552,1553,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1594,1595,1596,1597,1598,1599,1600,1601,1601,1601,1601,1601,1601,1600,1600,1600,1600,1600,1600,1600,1600,1600,1600,1600,1600,1599,1599,1599,1599,1599,1599,1599,1599,1599,1599,1599,1599,1598,1598,1598,1598,1598,1598,1598,1598,1598,1598,1598,1598,1597,1597,1597,1597,1597,1597,1597,1597,1597,1597,1597,1596,1596,1596,1596,1596,1596,1596,1596,1596,1596,1596,1596,1595,1595,1595,1595,1595,1595,1595,1595,1595,1595,1595,1595,1594,1594,1594,1594,1594,1594,1575,1537,1499,1462,1424,1387,1349,1311,1274,1236,1198,1161,1123,1085,1048,1010,973,935,897,860,822,784])</l>
<l>    gen_region_runs (hRegionLinesDarkMask, [1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497], [520,521,521,522,522,523,523,524,524,525,525,526,526,527,527,528,528,529,530,530,531,531,532,532,533,533,534,534,535,535,536,536,537,538,538,539,539,540,540,541,541,542,542,543,543,544,544,545,545,546,547,547,548,548,549,549,550,550,551,551,552,552,553,553,554,554,555,556,556,557,557,558,558,559,559,560,560,561,561,562,562,563,563,564,565,565,566,566,567,567,568,568,569,569,570,570,571,571,572,573,573,574,574,575,575,576,576,577,577,578,578,579,579,580,580,581,582,582,583,583,584,584,585,585,586,586,587,587,588,588,589,589,590,591,591,592,592,593,593,594,594,595,595,596,596,597,597,598,598,599,600,600,601,601,602,602,603,603,604,604,605,605,606,606,607,608,608,609,609,610,610,611,611,612,612,613,613,614,614,615,615,616], [807,1353,1627,1627,1626,1626,1626,1625,1625,1625,1624,1624,1624,1624,1623,1623,1623,1622,1622,1622,1621,1621,1621,1620,1620,1620,1619,1619,1619,1619,1618,1618,1618,1617,1617,1617,1616,1616,1616,1615,1615,1615,1614,1614,1614,1613,1613,1613,1613,1612,1612,1612,1611,1611,1611,1610,1610,1610,1609,1609,1609,1608,1608,1608,1608,1607,1607,1607,1606,1606,1606,1605,1605,1605,1604,1604,1604,1603,1603,1603,1602,1602,1602,1602,1601,1601,1601,1600,1600,1600,1599,1599,1599,1598,1598,1598,1597,1597,1597,1597,1596,1596,1596,1595,1595,1595,1594,1594,1594,1593,1593,1593,1592,1592,1592,1591,1591,1591,1591,1590,1590,1590,1589,1589,1589,1588,1588,1588,1587,1587,1587,1586,1586,1586,1586,1585,1585,1585,1584,1584,1584,1583,1583,1570,1545,1521,1496,1471,1446,1421,1397,1372,1347,1322,1297,1273,1248,1223,1198,1173,1149,1124,1099,1074,1049,1025,1000,975,950,925,901,876,851,826,801,777,752,727,702,677,653,628])    </l>
<l>    gen_region_runs (ROI_0, [974,975,976,977,978,979,980,981,982,982,983,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112], [1710,1709,1708,1707,1706,1703,1702,1702,1701,1703,1700,1703,1703,1703,1703,1703,1703,1703,1703,1703,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1702,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1701,1700,1700,1700,1700,1700,1700,1700,1700,1700,1700,1700,1700,1700,1701,1701,1702,1702,1703,1703,1704,1705,1705,1706,1706,1707,1707,1708,1708,1709,1710,1710,1711,1711,1712,1712,1713,1715,1717,1719,1721,1724,1726,1728,1731,1733,1735,1737,1740,1742,1744,1747,1749,1751,1753,1758,1759,1760,1761,1762,1763,1764,1765,1766,1768,1769,1770,1771,1772,1773,1774,1775,1776], [1712,1716,1720,1725,1729,1734,1738,1742,1701,1747,1700,1751,1755,1760,1764,1769,1773,1777,1781,1782,1783,1785,1787,1788,1790,1791,1793,1795,1796,1798,1800,1801,1803,1805,1806,1808,1809,1811,1813,1814,1816,1818,1819,1821,1823,1824,1826,1827,1829,1831,1832,1834,1836,1837,1837,1837,1837,1837,1837,1836,1836,1836,1836,1836,1836,1836,1836,1836,1836,1835,1835,1835,1835,1835,1835,1835,1835,1835,1834,1834,1834,1834,1834,1834,1834,1834,1834,1833,1833,1833,1833,1833,1833,1833,1833,1833,1833,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1832,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831,1831])</l>
<l>    gen_region_runs (TMP_Region, [944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105], [221,221,221,220,220,220,220,220,219,219,219,219,218,218,218,218,218,217,217,217,217,217,216,216,216,216,216,215,215,215,215,214,214,214,214,214,213,213,213,213,213,212,212,212,212,212,211,211,211,211,210,210,210,210,210,209,209,209,209,209,208,208,208,208,208,207,207,207,207,206,206,206,206,206,205,205,205,205,205,204,204,204,204,204,203,203,203,203,203,202,202,202,202,201,201,201,201,201,200,200,200,200,200,199,199,199,199,199,198,198,198,198,197,197,197,197,197,196,196,196,196,196,195,195,195,195,195,194,194,194,194,193,193,193,193,193,192,192,192,192,192,191,191,191,191,191,190,190,190,190,189,189,189,189,189,188,188,188,198,216,235,253], [227,241,254,268,281,295,308,322,336,349,363,376,390,397,397,397,397,398,398,398,398,398,398,398,398,399,399,399,399,399,399,399,399,400,400,400,400,400,400,400,400,401,401,401,401,401,401,401,401,402,402,402,402,402,402,402,402,403,403,403,403,399,398,398,398,397,397,396,396,396,395,395,395,394,394,394,393,393,393,392,392,391,391,391,390,390,390,389,389,389,388,388,388,387,387,386,386,386,385,385,382,380,380,379,378,378,377,377,376,376,376,376,376,376,376,376,375,373,371,370,368,366,365,363,361,360,358,356,355,353,351,350,348,347,345,343,342,340,338,337,335,333,332,330,328,327,325,323,320,316,312,307,303,299,294,290,285,281,277,272,268,264])</l>
<l>    union2 (ROI_0, TMP_Region, hRegionLeftRightMask)</l>
<l>    union2 (hRegionLeftRightMask, hRegionLinesDarkMask, RegionUnion4)</l>
<c>    </c>
<l>    difference (EncapTracingROI, RegionUnion4, EncapTracingROI)</l>
<l>    hMinContrast := 70</l>
<l>    hMaxContrast := 200</l>
<l>    hErosionOffset := 10</l>
<l>    hMaxWidthDarkLines := 100</l>
<l>    IsStepMode := 0</l>
<l>    hMaxPercentInner := 95</l>
<l>    hStringDefect := 'NoneDefect%\
                    BlowHole%\
                    Contammination%\
                    Void%\
                    Void%\
                    BlowHole%\
                    Contammination\
                    %BlowHole\
                    %Contammination\
                    %Void\
                    %BlowHole\
                    %Contammination\
                    %Void\
                    %Void\
                    %BlowHole\
                    %Contammination\
                    %Void\
                    %Void\
                    %BlowHole\
                    %BlowHole%Done\n'</l>
<c>                      </c>
<l>*     _FCI_RecheckDL_EncapTracing (hImage, EncapTracingROI, DeepLearningDefectROI, DebugImageOut, DebugRegionOut, RegionFinalDarkLines, EncapRegion, DeepLearningDefectROIOutput, IsStepMode, hMinContrast, hMaxContrast, hErosionOffset, hMaxWidthDarkLines, hMaxPercentInner, hStringDefect, hArrayROI, hStringDefectOutput, hNumberOfDefect, DebugMessageOut)</l>
<c>* _FCI_Encap_Bottom_Tracing</c>
<c></c>
<l>    _FCI_Encap_Bottom_Tracing (hImage, EncapTracingROI, DebugImageOut, DebugRegionOut, RegionFinalDarkLines, EncapRegion, 1, hMinContrast, hMaxContrast, hErosionOffset, hMaxWidthDarkLines, DebugMessageOut, IsPass)</l>
<l>*     count_obj (EncapTracingROI, NumberNeedRecheck)</l>
<l>*     gen_rectangle1 (ROI_0, 1200.77, 496.086, 1326.98, 1567.19)</l>
<l>*     intersection (ROI_0, EncapRegion, RegionIntersection)</l>
<l>*     reduce_domain (hImage, RegionIntersection, ImageReduced)</l>
<l>*     threshold (hImage, Region, hMinContrast, 255)</l>
<l>*     hysteresis_threshold (hImage, RegionHysteresis, 130, 200, 100)</l>
<l>    gen_rectangle1 (ROIRecheck, 1214.53, 482.94, 1516.54, 1585.09)</l>
<l>hStringSplit := '%'</l>
<l>    _FCI_Encap_Bottom_Recheck (hImage, ROIRecheck, DeepLearningDefectROI, RegionFinalDarkLines, EncapRegion, DeepLearningDefectROIOutput, hErosionOffset, hMaxPercentInner, hStringDefect, hStringSplit, hStringDefectOutput, hNumberOfDefect, hStringDefectInputDisplay, hStringDefectOutputDisplay, hNumberOfDefect, hIsPass)</l>
<l>    dev_display (hImage)</l>
<l>    dev_disp_text (hStringDefectOutput, 'window', 'top', 'left', 'black', [], [])</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (DeepLearningDefectROIOutput)</l>
<l>    dev_set_color ('red')</l>
<l>    dev_display (EncapRegion)</l>
<c>    </c>
<l>endfor </l>
<c></c>
<l>*     smallest_rectangle1 (EncapTracingROI, Row1EncapROI, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>*     region_features (EncapTracingROI, 'width', WidthROI)</l>
<l>*     area_center (EncapTracingROI, Area1, RowCenter, ColumnCenter)</l>
<l>*     get_image_size (Image1, Width, Height)</l>
<l>*     reduce_domain (hImage, EncapTracingROI, ImageReduced1)</l>
<l>*     threshold (ImageReduced1, RegionWhite, Thresh_Max, 255)</l>
<l>*     opening_circle (RegionWhite, RegionOpening, 3.5)</l>
<l>*     opening_rectangle1 (RegionOpening, RegionOpening1, 100, 1)</l>
<l>*     intersection (RegionOpening1, EncapTracingROI, RegionIntersection)</l>
<l>*     connection (RegionIntersection, ConnectedRegions)</l>
<l>*     Rectangle := EncapTracingROI</l>
<l>*     if (Row1EncapROI &lt;Height/2.0)</l>
<l>*         select_shape (ConnectedRegions, SelectedRegions, ['width', 'row1'], 'and', [0.4*WidthROI,RowCenter], [0.9*WidthROI,99999])</l>
<l>*         union1 (SelectedRegions, RegionUnion)</l>
<l>*         count_obj (RegionUnion, Number)</l>
<l>*         if (Number &gt; 0)</l>
<l>*             smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>*             gen_rectangle1 (Rectangle, Row1EncapROI, Column1EncapROI, Row11, Column2EncapROI)</l>
<l>*         endif</l>
<l>*     else</l>
<l>*         select_shape (ConnectedRegions, SelectedRegions, ['width', 'row2'], 'and', [0.4*WidthROI,0], [0.9*WidthROI,RowCenter])</l>
<l>*         union1 (SelectedRegions, RegionUnion)</l>
<l>*         count_obj (RegionUnion, Number)</l>
<l>*         if (Number &gt; 0)</l>
<l>*             smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>*             gen_rectangle1 (Rectangle, Row21, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>*         endif</l>
<l>*     endif</l>
<l>*     dilation_circle (RegionWhite, RegionDilation, 3.5)</l>
<l>*     difference (Rectangle, RegionDilation, RegionDifference)</l>
<l>*     intersection (RegionDifference, hRegionMaskLinesDark, RegionIntersection2)</l>
<l>*     threshold (ImageReduced1, RegionDark,0, Thresh_Min)</l>
<c>    *Get region near Dark Lines region</c>
<l>*     dev_clear_window ()</l>
<l>*     union2 (RegionIntersection2, RegionDark, RegionUnion1)</l>
<l>*     union1 (RegionUnion1, RegionUnion2)</l>
<l>*     closing_rectangle1 (RegionUnion2, RegionClosing1, 1, 30)</l>
<l>*     opening_circle (RegionClosing1, RegionOpening2, 3.5)</l>
<l>*     connection (RegionClosing1, ConnectedRegions)</l>
<l>*     select_shape_proto (ConnectedRegions, hRegionMaskLinesDark, SelectedRegions1, 'overlaps_rel',20, 100)</l>
<l>*     dev_clear_window ()</l>
<l>*     dev_display (Image1)</l>
<l>*     dev_display (SelectedRegions1)</l>
<l>*     difference (RegionDifference, RegionDark, RegionDifference1)</l>
<l>*     connection (RegionDifference1, ConnectedRegions2)</l>
<l>*     select_shape (ConnectedRegions2, SelectedRegions2, ['area','height'], 'and',[999,50], [9999999,99999])</l>
<l>*     union1 (SelectedRegions2, RegionUnion3)</l>
<l>*     reduce_domain (ImageReduced1, RegionUnion3, ImageReduced)</l>
<c>    </c>
<l>*     closing_rectangle1 (RegionUnion3, RegionClosing, 2000, 1)</l>
<l>*     dev_clear_window ()</l>
<l>*     dev_display (hImage)</l>
<l>*     difference (RegionClosing, RegionWhite, RegionDifference2)</l>
<l>*     tuple_split (Image_files[index_read], '\\', Substrings)</l>
<l>*     dev_disp_text (Substrings[4] + '  ' + Substrings[5], 'window', 200, 200, 'black', [], [])</l>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="Top_param_encap">
<interface>
<oc>
<par name="Width_Select_min" base_type="ctrl" dimension="0"/>
<par name="Width_Select_max" base_type="ctrl" dimension="0"/>
<par name="Height_Select_min" base_type="ctrl" dimension="0"/>
<par name="Height_Select_max" base_type="ctrl" dimension="0"/>
<par name="Thresh_Min" base_type="ctrl" dimension="0"/>
<par name="Thresh_Max" base_type="ctrl" dimension="0"/>
<par name="Thresh_Black" base_type="ctrl" dimension="0"/>
<par name="Thresh_White" base_type="ctrl" dimension="0"/>
<par name="Dilate_Width" base_type="ctrl" dimension="0"/>
<par name="Dilate_Height" base_type="ctrl" dimension="0"/>
<par name="Opening_Rect_Width" base_type="ctrl" dimension="0"/>
<par name="Opening_Rect_Height" base_type="ctrl" dimension="0"/>
<par name="Smooth_Value_Crop" base_type="ctrl" dimension="0"/>
<par name="Shape_Width" base_type="ctrl" dimension="0"/>
<par name="Opening_Circle" base_type="ctrl" dimension="0"/>
<par name="Opening_Circle_Crop" base_type="ctrl" dimension="0"/>
<par name="Crop_Smooth_Height" base_type="ctrl" dimension="0"/>
<par name="Left_Crop_Expand" base_type="ctrl" dimension="0"/>
<par name="Right_Crop_Expand" base_type="ctrl" dimension="0"/>
<par name="Height_Crop_Expand" base_type="ctrl" dimension="0"/>
<par name="Left_SmoothBLCrop_Expand" base_type="ctrl" dimension="0"/>
<par name="Right_SmoothBLCrop_Expand" base_type="ctrl" dimension="0"/>
<par name="Height_SmoothCrop_Expand_bot" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Width_Select_min := 500</l>
<l>Width_Select_max := 1050</l>
<l>Height_Select_min := 1100</l>
<l>Height_Select_max := 1900</l>
<c></c>
<l>Thresh_Min := 62</l>
<l>Thresh_Max := 216</l>
<l>Thresh_Black := 15</l>
<l>Thresh_White := 230</l>
<c></c>
<c></c>
<l>Dilate_Width := 1</l>
<l>Dilate_Height := 1</l>
<l>Opening_Rect_Width := 1</l>
<l>Opening_Rect_Height := 1</l>
<c></c>
<l>Smooth_Value_Crop := 101</l>
<l>Shape_Width := 500</l>
<l>Opening_Circle := 40</l>
<l>Opening_Circle_Crop :=51</l>
<l>Crop_Smooth_Height := 51</l>
<c></c>
<l>Left_Crop_Expand := 230</l>
<l>Right_Crop_Expand := 230</l>
<l>Height_Crop_Expand := 230</l>
<c></c>
<l>Left_SmoothBLCrop_Expand := 230</l>
<l>Right_SmoothBLCrop_Expand := 230</l>
<l>Height_SmoothCrop_Expand_bot := 230</l>
<l>return ()</l>
</body>
<docu id="Top_param_encap">
<parameters>
<parameter id="Crop_Smooth_Height"/>
<parameter id="Dilate_Height"/>
<parameter id="Dilate_Width"/>
<parameter id="Height_Crop_Expand"/>
<parameter id="Height_Select_max"/>
<parameter id="Height_Select_min"/>
<parameter id="Height_SmoothCrop_Expand_bot"/>
<parameter id="Left_Crop_Expand"/>
<parameter id="Left_SmoothBLCrop_Expand"/>
<parameter id="Opening_Circle"/>
<parameter id="Opening_Circle_Crop"/>
<parameter id="Opening_Rect_Height"/>
<parameter id="Opening_Rect_Width"/>
<parameter id="Right_Crop_Expand"/>
<parameter id="Right_SmoothBLCrop_Expand"/>
<parameter id="Shape_Width"/>
<parameter id="Smooth_Value_Crop"/>
<parameter id="Thresh_Black"/>
<parameter id="Thresh_Max"/>
<parameter id="Thresh_Min"/>
<parameter id="Thresh_White"/>
<parameter id="Width_Select_max"/>
<parameter id="Width_Select_min"/>
</parameters>
</docu>
</procedure>
<procedure name="Bottom_param_encap">
<interface>
<oc>
<par name="Thresh_Min_bot" base_type="ctrl" dimension="0"/>
<par name="Thresh_Max_bot" base_type="ctrl" dimension="0"/>
<par name="Thresh_Black_bot" base_type="ctrl" dimension="0"/>
<par name="Thresh_White_bot" base_type="ctrl" dimension="0"/>
<par name="Width_Select_min_bot" base_type="ctrl" dimension="0"/>
<par name="Width_Select_max_bot" base_type="ctrl" dimension="0"/>
<par name="Height_Select_min_bot" base_type="ctrl" dimension="0"/>
<par name="Height_Select_max_bot" base_type="ctrl" dimension="0"/>
<par name="Dilate_Width_bot" base_type="ctrl" dimension="0"/>
<par name="Dilate_Height_bot" base_type="ctrl" dimension="0"/>
<par name="Opening_Rect_Width_bot" base_type="ctrl" dimension="0"/>
<par name="Opening_Rect_Height_bot" base_type="ctrl" dimension="0"/>
<par name="Smooth_Value_Crop_bot" base_type="ctrl" dimension="0"/>
<par name="Shape_Width_bot" base_type="ctrl" dimension="0"/>
<par name="Opening_Circle_bot" base_type="ctrl" dimension="0"/>
<par name="Opening_Circle_Crop_bot" base_type="ctrl" dimension="0"/>
<par name="Crop_Smooth_Height_bot" base_type="ctrl" dimension="0"/>
<par name="Left_Crop_Expand_bot" base_type="ctrl" dimension="0"/>
<par name="Right_Crop_Expand_bot" base_type="ctrl" dimension="0"/>
<par name="Height_Crop_Expand_bot" base_type="ctrl" dimension="0"/>
<par name="Left_SmoothBLCrop_Expand_bot" base_type="ctrl" dimension="0"/>
<par name="Right_SmoothBLCrop_Expand_bot" base_type="ctrl" dimension="0"/>
<par name="Height_SmoothBLCrop_Expand_bot" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Thresh_Min_bot := 60</l>
<l>Thresh_Max_bot := 216</l>
<l>Thresh_Black_bot := 15</l>
<l>Thresh_White_bot := 230</l>
<c></c>
<l>Width_Select_min_bot := 500</l>
<l>Width_Select_max_bot := 1050</l>
<l>Height_Select_min_bot := 900</l>
<l>Height_Select_max_bot := 1800</l>
<c></c>
<l>Dilate_Width_bot := 5</l>
<l>Dilate_Height_bot := 1</l>
<l>Opening_Rect_Width_bot := 20</l>
<l>Opening_Rect_Height_bot := 1</l>
<c></c>
<l>Smooth_Value_Crop_bot := 51</l>
<l>Shape_Width_bot := 500</l>
<l>Opening_Circle_bot := 20</l>
<l>Opening_Circle_Crop_bot := 51</l>
<l>Crop_Smooth_Height_bot := 51</l>
<c></c>
<l>Left_Crop_Expand_bot := 230</l>
<l>Right_Crop_Expand_bot := 230</l>
<l>Height_Crop_Expand_bot := 230</l>
<c></c>
<l>Left_SmoothBLCrop_Expand_bot := 230</l>
<l>Right_SmoothBLCrop_Expand_bot := 230</l>
<l>Height_SmoothBLCrop_Expand_bot := 230</l>
<l>return ()</l>
</body>
<docu id="Bottom_param_encap">
<parameters>
<parameter id="Crop_Smooth_Height_bot"/>
<parameter id="Dilate_Height_bot"/>
<parameter id="Dilate_Width_bot"/>
<parameter id="Height_Crop_Expand_bot"/>
<parameter id="Height_Select_max_bot"/>
<parameter id="Height_Select_min_bot"/>
<parameter id="Height_SmoothBLCrop_Expand_bot"/>
<parameter id="Left_Crop_Expand_bot"/>
<parameter id="Left_SmoothBLCrop_Expand_bot"/>
<parameter id="Opening_Circle_Crop_bot"/>
<parameter id="Opening_Circle_bot"/>
<parameter id="Opening_Rect_Height_bot"/>
<parameter id="Opening_Rect_Width_bot"/>
<parameter id="Right_Crop_Expand_bot"/>
<parameter id="Right_SmoothBLCrop_Expand_bot"/>
<parameter id="Shape_Width_bot"/>
<parameter id="Smooth_Value_Crop_bot"/>
<parameter id="Thresh_Black_bot"/>
<parameter id="Thresh_Max_bot"/>
<parameter id="Thresh_Min_bot"/>
<parameter id="Thresh_White_bot"/>
<parameter id="Width_Select_max_bot"/>
<parameter id="Width_Select_min_bot"/>
</parameters>
</docu>
</procedure>
<procedure name="_FCI_RecheckDL_EncapTracing">
<interface>
<io>
<par name="hImage" base_type="iconic" dimension="0"/>
<par name="EncapTracingROI" base_type="iconic" dimension="0"/>
<par name="DeepLearningDefectROIInput" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DebugImageOut" base_type="iconic" dimension="0"/>
<par name="DebugRegionOut" base_type="iconic" dimension="0"/>
<par name="RegionFinalDarkLines" base_type="iconic" dimension="0"/>
<par name="EncapRegion" base_type="iconic" dimension="0"/>
<par name="DeepLearningDefectROIOutput" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="IsStepMode" base_type="ctrl" dimension="0"/>
<par name="hMinContrast" base_type="ctrl" dimension="0"/>
<par name="hMaxContrast" base_type="ctrl" dimension="0"/>
<par name="hErosionOffset" base_type="ctrl" dimension="0"/>
<par name="hMaxWidthDarkLines" base_type="ctrl" dimension="0"/>
<par name="hMinPercentInner" base_type="ctrl" dimension="0"/>
<par name="hStringDefectInput" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="hArrayROI" base_type="ctrl" dimension="0"/>
<par name="hStringDefectOutput" base_type="ctrl" dimension="0"/>
<par name="hNumberOfDefect" base_type="ctrl" dimension="0"/>
<par name="DebugMessageOut" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>***Debug Parameter</c>
<l>gen_empty_obj (DebugImageOut)</l>
<l>gen_empty_obj (DebugRegionOut)</l>
<l>gen_empty_obj (EncapRegion)</l>
<c></c>
<l>DebugMessageOut :=  []</l>
<c>***Parameter</c>
<l>shape_trans (EncapTracingROI, EncapTracingROITrans, 'rectangle2')</l>
<l>difference (EncapTracingROITrans, EncapTracingROI, hRegionEncapMask)</l>
<l>smallest_rectangle1 (EncapTracingROITrans, Row1EncapROI, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>region_features (EncapTracingROITrans, 'width', WidthROI)</l>
<l>area_center (EncapTracingROITrans, Area1, RowCenter, ColumnCenter)</l>
<l>get_image_size (hImage, Width, Height)</l>
<l>reduce_domain (hImage, EncapTracingROITrans, ImageReduced1)</l>
<l>threshold (ImageReduced1, RegionWhite, hMaxContrast, 255)</l>
<l>if (IsStepMode)</l>
<l>    Message := ['White Region [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionWhite, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif    </l>
<l>opening_circle (RegionWhite, RegionOpening, 3.5)</l>
<l>opening_rectangle1 (RegionOpening, RegionOpening1, 50, 1)</l>
<l>intersection (RegionOpening1, EncapTracingROITrans, RegionIntersection)</l>
<l>connection (RegionIntersection, ConnectedRegions)</l>
<l>Rectangle := EncapTracingROITrans</l>
<c>* Check bottom or top Encap (in bottom encap)</c>
<l>if (RowCenter &lt;Height/2.0)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['width', 'row1'], 'and', [0.4*WidthROI,RowCenter], [0.9*WidthROI,99999])</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<l>    count_obj (RegionUnion, Number)</l>
<l>    if (Number &gt; 0) </l>
<l>        smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>        gen_rectangle1 (Rectangle, Row1EncapROI, Column1EncapROI, Row11, Column2EncapROI)</l>
<l>    endif</l>
<l>else</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['width', 'row2'], 'and', [0.4*WidthROI,0], [0.9*WidthROI,RowCenter])</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<l>    count_obj (RegionUnion, Number)</l>
<l>    if (Number &gt; 0)</l>
<l>        smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>        gen_rectangle1 (Rectangle, Row21, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>    endif</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := ['ROI for tracing encap after remove White Base ROI  [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, Rectangle, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif    </l>
<c></c>
<c>* Get Dark region</c>
<l>threshold (ImageReduced1, RegionDark,0, hMinContrast)</l>
<l>if (IsStepMode)</l>
<l>    Message := ['Dark region']</l>
<l>    _FCI_DebugParameters (hImage, RegionDark, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif </l>
<c>* Remove White region</c>
<l>dilation_circle (RegionWhite, RegionDilation, 3.5)</l>
<l>difference (Rectangle, RegionDilation, RegionDifference)</l>
<c></c>
<c>*Get region near Dark Lines mask region</c>
<l>closing_rectangle1 (RegionWhite, RegionDilationWhite, 2*hMaxWidthDarkLines +1, 1)</l>
<l>* difference (RegionDilationWhite, RegionWhite, RegionDifference4)</l>
<l>intersection (RegionDilationWhite, hRegionEncapMask, RegionIntersection2)</l>
<l>connection (RegionIntersection2, ConnectedRegions3)</l>
<l>select_shape (ConnectedRegions3, SelectedRegions5, 'area', 'and', 4000, 999999)</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Region near Dark Lines Mask region  [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, SelectedRegions5, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif </l>
<c>* Connect region near lines and region lines mask</c>
<l>union2 (SelectedRegions5, RegionDark, RegionUnion1)</l>
<l>union1 (RegionUnion1, RegionUnion2)</l>
<l>closing_rectangle1 (RegionUnion2, RegionClosing1, 1, 30)</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Region after connect Dark lines region and Dark encap region  [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionClosing1, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif </l>
<c></c>
<l>opening_circle (RegionClosing1, RegionOpening2, 3.5)</l>
<l>connection (RegionClosing1, ConnectedRegions)</l>
<l>select_shape_proto (ConnectedRegions, hRegionEncapMask, SelectedRegions1, 'overlaps_rel',30, 100)</l>
<l>union1 (SelectedRegions1, RegionFinalDarkLines)</l>
<l>count_obj (RegionFinalDarkLines, Number1)</l>
<c></c>
<l>if (Number1 &gt;0)</l>
<l>    if (IsStepMode)</l>
<l>        Message := [' Final Dark Lines region for Recheck   [Tracing Recheck Encap]']</l>
<l>        _FCI_DebugParameters (hImage, RegionFinalDarkLines, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>    endif</l>
<l>endif</l>
<l>difference (RegionDifference, RegionDark, RegionDifference1)</l>
<l>connection (RegionDifference1, ConnectedRegions2)</l>
<l>select_shape (ConnectedRegions2, SelectedRegions2, ['area','height'], 'and',[19999,50], [9999999,99999])</l>
<l>union1 (SelectedRegions2, RegionUnion3)</l>
<l>count_obj (RegionUnion3, Number2)</l>
<l>if (Number2 =0 )</l>
<l>    IsPass := 0</l>
<l>    return()</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Encap region before closing  [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionUnion3, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<l>closing_rectangle1 (RegionUnion3, RegionClosing2, 1, 300)</l>
<l>select_shape_proto (SelectedRegions2, RegionClosing2, SelectedRegions4, 'overlaps_rel',5, 100)</l>
<l>union1 (SelectedRegions4, RegionUnion5)</l>
<c></c>
<l>closing_rectangle1 (RegionUnion5, RegionClosing, WidthROI, 1)</l>
<l>difference (RegionClosing, RegionDilationWhite, RegionDifference2)</l>
<c>* Remove Mask region</c>
<l>opening_circle (RegionDifference2, RegionOpening4, 33.5)</l>
<l>difference (RegionOpening4, hRegionEncapMask, RegionDifference3)</l>
<c></c>
<l>connection (RegionDifference3, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions3, 'area', 'and', 50000, 9999999)</l>
<l>union1 (SelectedRegions3, RegionUnion4)</l>
<l>opening_circle (RegionUnion4, RegionOpening3, hErosionOffset + 1)</l>
<l>count_obj (RegionOpening3, Number3)</l>
<c></c>
<l>if (Number3 = 0)</l>
<l>    IsPass := 0 </l>
<l>    return()</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := ['Encap region  [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionOpening3, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<l>IsPass := 1</l>
<l>difference (RegionOpening3, RegionFinalDarkLines, EncapRegion)</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Final Encap region after remove Dark region on Encap [Tracing Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, EncapRegion, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<l>tuple_split (hStringDefectInput, ';', hStringDefectSplit)</l>
<l>shape_trans (DeepLearningDefectROIInput, RegionTransDL, 'inner_circle')</l>
<l>count_obj (RegionTransDL, NumberDefectInput)</l>
<l>gen_empty_obj (DeepLearningDefectROIOutput)</l>
<l>hStringDefectOutput := ''</l>
<l>hArrayROI := []</l>
<l>for Index := 1 to NumberDefectInput  by 1</l>
<l>    select_obj (RegionTransDL, ObjectSelected, Index )</l>
<l>    select_shape_proto (ObjectSelected, EncapRegion, SelectedRegions4, 'overlaps_rel', hMinPercentInner, 100)</l>
<l>    count_obj (SelectedRegions4, Number4)</l>
<l>    if(Number4  &gt; 0)</l>
<l>        smallest_rectangle1 (SelectedRegions4, TopLeftY, TopLeftX, BottomRightY, BottomRightX)</l>
<l>        tuple_concat (hArrayROI, [TopLeftX , TopLeftY , BottomRightX , BottomRightY], hArrayROI)</l>
<l>        concat_obj (DeepLearningDefectROIOutput, ObjectSelected, DeepLearningDefectROIOutput)</l>
<l>        hStringDefectOutput := hStringDefectOutput  + hStringDefectSplit[Index - 1] + ';'</l>
<l>    endif</l>
<l>endfor</l>
<l>count_obj (DeepLearningDefectROIOutput, hNumberOfDefect)</l>
<l>if (IsStepMode)</l>
<l>    Message := [' All Defect Region after Recheck  [Recheck Encap]']</l>
<l>    _FCI_DebugParameters (hImage, DeepLearningDefectROIOutput, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<c></c>
<l>return ()</l>
</body>
<docu id="_FCI_RecheckDL_EncapTracing">
<parameters>
<parameter id="DebugImageOut"/>
<parameter id="DebugMessageOut"/>
<parameter id="DebugRegionOut"/>
<parameter id="DeepLearningDefectROIInput"/>
<parameter id="DeepLearningDefectROIOutput"/>
<parameter id="EncapRegion"/>
<parameter id="EncapTracingROI"/>
<parameter id="IsStepMode"/>
<parameter id="RegionFinalDarkLines"/>
<parameter id="hArrayROI"/>
<parameter id="hErosionOffset"/>
<parameter id="hImage"/>
<parameter id="hMaxContrast"/>
<parameter id="hMaxWidthDarkLines"/>
<parameter id="hMinContrast"/>
<parameter id="hMinPercentInner"/>
<parameter id="hNumberOfDefect"/>
<parameter id="hStringDefectInput"/>
<parameter id="hStringDefectOutput"/>
</parameters>
</docu>
</procedure>
<procedure name="_FCI_Encap_Bottom_Tracing">
<interface>
<io>
<par name="hImage" base_type="iconic" dimension="0"/>
<par name="EncapTracingROI" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DebugImageOut" base_type="iconic" dimension="0"/>
<par name="DebugRegionOut" base_type="iconic" dimension="0"/>
<par name="RegionFinalDarkLines" base_type="iconic" dimension="0"/>
<par name="EncapRegion" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="IsStepMode" base_type="ctrl" dimension="0"/>
<par name="hMinContrast" base_type="ctrl" dimension="0"/>
<par name="hMaxContrast" base_type="ctrl" dimension="0"/>
<par name="hErosionOffset" base_type="ctrl" dimension="0"/>
<par name="hMaxWidthDarkLines" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="DebugMessageOut" base_type="ctrl" dimension="0"/>
<par name="IsPass" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>***Debug Parameter</c>
<l>gen_empty_obj (DebugImageOut)</l>
<l>gen_empty_obj (DebugRegionOut)</l>
<l>gen_empty_obj (EncapRegion)</l>
<c></c>
<l>DebugMessageOut :=  []</l>
<l>IsPass := false</l>
<c>***Parameter</c>
<l>shape_trans (EncapTracingROI, EncapTracingROITrans, 'rectangle2')</l>
<l>difference (EncapTracingROITrans, EncapTracingROI, hRegionEncapMask)</l>
<l>smallest_rectangle1 (EncapTracingROITrans, Row1EncapROI, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>region_features (EncapTracingROITrans, 'width', WidthROI)</l>
<l>area_center (EncapTracingROITrans, Area1, RowCenter, ColumnCenter)</l>
<l>get_image_size (hImage, Width, Height)</l>
<l>reduce_domain (hImage, EncapTracingROITrans, ImageReduced1)</l>
<l>threshold (ImageReduced1, RegionWhite, hMaxContrast, 255)</l>
<l>if (IsStepMode)</l>
<l>    Message := ['White Region [Tracing Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionWhite, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif    </l>
<l>opening_circle (RegionWhite, RegionOpening, 3.5)</l>
<l>opening_rectangle1 (RegionOpening, RegionOpening1, 50, 1)</l>
<l>intersection (RegionOpening1, EncapTracingROITrans, RegionIntersection)</l>
<l>connection (RegionIntersection, ConnectedRegions)</l>
<l>Rectangle := EncapTracingROITrans</l>
<c>* Check bottom or top Encap (in bottom encap)</c>
<l>if (RowCenter &lt;Height/2.0)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['width', 'row1'], 'and', [0.4*WidthROI,RowCenter], [0.9*WidthROI,99999])</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<l>    count_obj (RegionUnion, Number)</l>
<l>    if (Number &gt; 0) </l>
<l>        smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>        gen_rectangle1 (Rectangle, Row1EncapROI, Column1EncapROI, Row11, Column2EncapROI)</l>
<l>    endif</l>
<l>else</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, ['width', 'row2'], 'and', [0.4*WidthROI,0], [0.9*WidthROI,RowCenter])</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<l>    count_obj (RegionUnion, Number)</l>
<l>    if (Number &gt; 0)</l>
<l>        smallest_rectangle1 (RegionUnion, Row11, Column11, Row21, Column21)</l>
<l>        gen_rectangle1 (Rectangle, Row21, Column1EncapROI, Row2EncapROI, Column2EncapROI)</l>
<l>    endif</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := ['ROI for tracing encap after remove White Base ROI  [Tracing Encap]']</l>
<l>    _FCI_DebugParameters (hImage, Rectangle, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif    </l>
<c></c>
<c>* Get Dark region</c>
<l>threshold (ImageReduced1, RegionDark,0, hMinContrast)</l>
<l>if (IsStepMode)</l>
<l>    Message := ['Dark region']</l>
<l>    _FCI_DebugParameters (hImage, RegionDark, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif </l>
<c>* Remove White region</c>
<l>opening_circle (RegionWhite, RegionWhite, 3.5)</l>
<l>dilation_circle (RegionWhite, RegionDilation, 3.5)</l>
<l>difference (Rectangle, RegionDilation, RegionDifference)</l>
<c></c>
<c>*Get region near Dark Lines mask region</c>
<l>closing_rectangle1 (RegionWhite, RegionDilationWhite, 2*hMaxWidthDarkLines +1, 1)</l>
<l>difference (RegionDilationWhite, RegionWhite, RegionDifference4)</l>
<l>opening_rectangle1 (RegionDifference4, RegionOpening5, 1, 5)</l>
<l>closing_rectangle1 (RegionOpening5, RegionClosing3, 1, 5)</l>
<l>connection (RegionClosing3, ConnectedRegions5)</l>
<l>select_shape_proto (ConnectedRegions5, hRegionEncapMask, SelectedRegions7, 'overlaps_rel',10, 100)</l>
<l>union1 (SelectedRegions7, RegionFinalDarkLines)</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Region near Dark Lines Mask region  [Tracing Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionFinalDarkLines, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif </l>
<c>* Connect region near lines and region lines mask</c>
<l>* union2 (SelectedRegions7, RegionDark, RegionUnion1)</l>
<l>* union1 (RegionUnion1, RegionUnion2)</l>
<l>* closing_rectangle1 (RegionUnion2, RegionClosing1, 1, 30)</l>
<l>* if (IsStepMode)</l>
<l>*     Message := [' Region after connect Dark lines region and Dark encap region  [Tracing Encap]']</l>
<l>*     _FCI_DebugParameters (hImage, RegionClosing1, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>* endif </l>
<c></c>
<l>* opening_circle (RegionClosing1, RegionOpening2, 3.5)</l>
<l>* connection (RegionClosing1, ConnectedRegions)</l>
<l>* select_shape_proto (ConnectedRegions, hRegionEncapMask, SelectedRegions1, 'overlaps_rel',10, 100)</l>
<l>* union1 (SelectedRegions1, RegionFinalDarkLines)</l>
<l>* count_obj (RegionFinalDarkLines, Number1)</l>
<c></c>
<l>* if (Number1 &gt;0)</l>
<l>*     if (IsStepMode)</l>
<l>*         Message := ['Dark Lines region [Tracing Encap]']</l>
<l>*         _FCI_DebugParameters (hImage, RegionFinalDarkLines, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>*     endif</l>
<l>* endif</l>
<c>** Tracing Encap</c>
<l>difference (RegionDifference, RegionDark, RegionDifference1)</l>
<l>closing_rectangle1 (RegionDifference1, RegionClosing1, 3, 3)</l>
<l> connection (RegionClosing1, ConnectedRegions2)</l>
<l>* select_shape (ConnectedRegions2, SelectedRegions2, ['area','height'], 'and',[1999,50], [9999999,99999])</l>
<l>* union1 (SelectedRegions2, RegionUnion3)</l>
<l>count_obj (RegionClosing1, Number2)</l>
<l>if (Number2 =0 )</l>
<l>    return()</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Encap region before closing  [Tracing Encap]']</l>
<l>    _FCI_DebugParameters (hImage, RegionClosing1, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<l>closing_rectangle1 (RegionClosing1, RegionClosing2, 1, 50)</l>
<l>opening_circle (RegionClosing2, RegionOpening3, 20)</l>
<l>connection (RegionOpening3, ConnectedRegions4)</l>
<l>select_shape (ConnectedRegions4, SelectedRegions6, 'area', 'and', 50000, 999999)</l>
<l>select_shape_proto (ConnectedRegions2, SelectedRegions6, SelectedRegions4, 'overlaps_rel',5, 100)</l>
<l>union1 (SelectedRegions4, RegionUnion5)</l>
<l>closing_rectangle1 (RegionUnion5, RegionClosing, WidthROI, 1)</l>
<l>closing_circle (RegionClosing, RegionClosing4, 3.5)</l>
<l>difference (RegionClosing4, RegionDilationWhite, RegionDifference2)</l>
<l>fill_up (RegionDifference2, RegionFillUp)</l>
<c>* Remove Mask region</c>
<c></c>
<l>opening_circle (RegionFillUp, RegionOpening4, 33.5)</l>
<l>difference (RegionOpening4, hRegionEncapMask, RegionDifference3)</l>
<l>connection (RegionDifference3, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions3, 'area', 'and', 50000, 9999999)</l>
<l>union1 (SelectedRegions3, RegionUnion4)</l>
<l>opening_circle (RegionUnion4, EncapRegion, hErosionOffset + 1)</l>
<l>count_obj (EncapRegion, Number3)</l>
<l>if (Number3 = 0)</l>
<l>    return()</l>
<l>endif</l>
<l>if (IsStepMode)</l>
<l>    Message := [' Final Encap region [Tracing Encap]']</l>
<l>    _FCI_DebugParameters (hImage, EncapRegion, DebugImageOut, DebugRegionOut, DebugImageOut, DebugRegionOut, Message, DebugMessageOut, DebugMessageOut)</l>
<l>endif</l>
<l>IsPass := true</l>
<l>return ()</l>
</body>
<docu id="_FCI_Encap_Bottom_Tracing">
<parameters>
<parameter id="DebugImageOut"/>
<parameter id="DebugMessageOut"/>
<parameter id="DebugRegionOut"/>
<parameter id="EncapRegion"/>
<parameter id="EncapTracingROI"/>
<parameter id="IsPass"/>
<parameter id="IsStepMode"/>
<parameter id="RegionFinalDarkLines"/>
<parameter id="hErosionOffset"/>
<parameter id="hImage"/>
<parameter id="hMaxContrast"/>
<parameter id="hMaxWidthDarkLines"/>
<parameter id="hMinContrast"/>
</parameters>
</docu>
</procedure>
<procedure name="_FCI_Encap_Bottom_Recheck">
<interface>
<io>
<par name="hImage" base_type="iconic" dimension="0"/>
<par name="EncapRecheckROI" base_type="iconic" dimension="0"/>
<par name="DeepLearningDefectROIInput" base_type="iconic" dimension="0"/>
<par name="RegionFinalDarkLines" base_type="iconic" dimension="0"/>
<par name="EncapRegion" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DeepLearningDefectROIOutput" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="hErosionOffset" base_type="ctrl" dimension="0"/>
<par name="hMinPercentInner" base_type="ctrl" dimension="0"/>
<par name="hStringDefectInput" base_type="ctrl" dimension="0"/>
<par name="hStringSplit" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="hArrayROI" base_type="ctrl" dimension="0"/>
<par name="hStringDefectOutput" base_type="ctrl" dimension="0"/>
<par name="hStringDefectInputDisplay" base_type="ctrl" dimension="0"/>
<par name="hStringDefectOutputDisplay" base_type="ctrl" dimension="0"/>
<par name="hNumberOfDefect" base_type="ctrl" dimension="0"/>
<par name="hIsPass" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>***Debug Parameter</c>
<c>***Parameter</c>
<l>hIsPass := 0</l>
<l>hStringDefectOutput := ''</l>
<l>hStringDefectOutputDisplay := ''</l>
<l>hStringDefectInputDisplay := ''</l>
<l>hArrayROI := []</l>
<l>hNumberOfDefect := 0</l>
<l>erosion_circle (EncapRegion, EncapRegionErosion, hErosionOffset+1)</l>
<l>dilation_circle (EncapRegion, RegionDilation, 5.5)</l>
<l>intersection (RegionFinalDarkLines, EncapRecheckROI, RegionIntersectionDarkLines)</l>
<l>tuple_split (hStringDefectInput, hStringSplit, hStringDefectSplit)</l>
<l>tuple_length (hStringDefectSplit, Length1)</l>
<l>* tuple_regexp_test (hStringDefectSplit, 'NonDefect', NumMatches)</l>
<l>* if (NumMatches &gt;0)</l>
<l>*     hStringDefectInputDisplay :=  'NonDefect' </l>
<l>*     return()</l>
<l>* endif</l>
<l>*     shape_trans (DeepLearningDefectROIInput, RegionTransDL, 'inner_circle')</l>
<l>count_obj (DeepLearningDefectROIInput, NumberDefectInput)</l>
<l>gen_empty_obj (DeepLearningDefectROIOutput)</l>
<l>for Index := 1 to Length1-1  by 1</l>
<l>    select_obj (DeepLearningDefectROIInput, ObjectSelected, Index )</l>
<l>    select_shape_proto (ObjectSelected, RegionIntersectionDarkLines, SelectedRegions4, 'overlaps_abs', 10, 999999)</l>
<l>    count_obj (SelectedRegions4, Number4)</l>
<l>    select_shape_proto (ObjectSelected, RegionDilation, SelectedRegionsInner, 'overlaps_abs', 1, 6666666)</l>
<l>    count_obj (SelectedRegionsInner, NumberInner)</l>
<l>    select_shape_proto (SelectedRegions4, EncapRegionErosion, SelectedRegions, 'overlaps_rel', hMinPercentInner, 100)</l>
<l>    count_obj (SelectedRegions, Number5)</l>
<c>    * just recheck defect near Dark lines ( Number4 &gt;0)</c>
<l>    hStringDefectInputDisplay := hStringDefectInputDisplay + hStringDefectSplit[Index - 1] + '; '</l>
<l>    if((Number4  = 0 and NumberInner &gt; 0) or ( Number4  &gt;0 and Number5 &gt;0))</l>
<l>        smallest_rectangle1 (ObjectSelected, TopLeftY, TopLeftX, BottomRightY, BottomRightX)</l>
<l>        tuple_concat (hArrayROI, [TopLeftX , TopLeftY , BottomRightX , BottomRightY], hArrayROI)</l>
<l>        concat_obj (DeepLearningDefectROIOutput, ObjectSelected, DeepLearningDefectROIOutput)</l>
<l>        hStringDefectOutput := hStringDefectOutput  + hStringDefectSplit[Index - 1] + hStringSplit</l>
<l>        hStringDefectOutputDisplay := hStringDefectOutputDisplay + hStringDefectSplit[Index - 1]  + '; '</l>
<l>    endif</l>
<l>endfor</l>
<l>tuple_length (hArrayROI, Length)</l>
<l>if( Length = 0)</l>
<l>    hStringDefectOutputDisplay := 'NonDefect'</l>
<l>    hStringDefectOutput := 'NonDefect%'</l>
<l>endif</l>
<l>hStringDefectInputDisplay := hStringDefectInputDisplay + '. Done!'</l>
<l>hStringDefectOutput := hStringDefectOutput + '. Done!'</l>
<l>count_obj (DeepLearningDefectROIOutput, hNumberOfDefect)</l>
<l>hIsPass := 1</l>
<c></c>
<l>return ()</l>
</body>
<docu id="_FCI_Encap_Bottom_Recheck">
<parameters>
<parameter id="DeepLearningDefectROIInput"/>
<parameter id="DeepLearningDefectROIOutput"/>
<parameter id="EncapRecheckROI"/>
<parameter id="EncapRegion"/>
<parameter id="RegionFinalDarkLines"/>
<parameter id="hArrayROI"/>
<parameter id="hErosionOffset"/>
<parameter id="hImage"/>
<parameter id="hIsPass"/>
<parameter id="hMinPercentInner"/>
<parameter id="hNumberOfDefect"/>
<parameter id="hStringDefectInput"/>
<parameter id="hStringDefectInputDisplay"/>
<parameter id="hStringDefectOutput"/>
<parameter id="hStringDefectOutputDisplay"/>
<parameter id="hStringSplit"/>
</parameters>
</docu>
</procedure>
</hdevelop>
